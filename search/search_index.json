{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>These pages contain documentation for LightFi sensors and data:</p> <ul> <li>See https://www.lightfi.io for general information about our solution offerings.</li> <li>Sensors - Documentation on sensors and installation.</li> <li>Dashboard - Documentation on the LightFi web portal.</li> <li>API - Documentation on the LightFi web API for building your own web clients or applications.</li> <li>(Documentation github - should you spot an issue with or wish to contribute to improve this documentation)</li> </ul>"},{"location":"API/","title":"LightFi API","text":"<p>The main documentation and interactive API test page can be found at:</p> <ul> <li>https://apiv2.lightfi.io/docs </li> </ul> <p>Here you can test the routes directly from the documentation page (Note: API calls that return a large amount of data can be very slow to render on the interactive page, real API use will be much faster).</p>"},{"location":"API/#authentication-oauth2","title":"Authentication (OAuth2)","text":"<p>The primary authentication method for the LightFi API uses OAuth2. OAuth2 is an open standard for authorisation that provides a way for applications to access resources from a server on behalf of a user. OAuth2 uses tokens to authenticate requests for resources, an access token to make requests to the API and a refresh token can be used to obtain a new access token when the original one expires.</p>"},{"location":"API/#oauth2-clients","title":"OAuth2 clients","text":"<p>In order to use the API you must have an OAuth2 client id and client secret for your organisation to use. This can be obtained by contacting LightFi support.</p> <p>Each client can be configured according to the needs of the customer, a typical set of configuration parameters is shown below:</p> <ul> <li>access token lifetime - 240 minutes (must be between 5 minutes and 1 day)</li> <li>refresh token lifetime - 3650 days (must be between 60 minutes and 3650 days)</li> <li>callback URLs - <code>http://localhost:3000/, https://apiv2.lightfi.io/docs/redirect, https://oauth.pstmn.io/v1/callback</code></li> <li>sign out URLs - none</li> </ul>"},{"location":"API/#token-lifetime","title":"Token lifetime","text":"<p>The lifetime of the tokens can affect the security level of your data in case of a token being obtained by a malicious party. A shorter access token lifetime will mean that the token can only be used for a shorter period before the user must log in again or the refresh token should be used to obtain a new access token.</p> <p>A shorter refresh token lifetime also enhances security in a similar way, however, the user must always log in again manually after the token expires to obtain a new token. For programmatic usage this may not be desirable and a longer lifetime refresh token can be used (up to 10 years), this means the same token can be used to obtain access tokens and use the API for the lifetime of the refresh token without any further user input. The refresh token should always be stored securely and should not be shared with anyone.</p>"},{"location":"API/#callback-urls","title":"Callback URLs","text":"<p>These URLs are useful for allowing a user to log in using the hosted web UI. Thus you don't need to handle user authentication manually. These URLs should ideally be kept to a minimum set to enhance security. A default set of URLs are provided which allow login for the API test page, Postman and local development. These URLs should help start using the API but can be disabled or changed as your application develops.</p>"},{"location":"API/#authentication-examples","title":"Authentication Examples","text":""},{"location":"API/#implementing-api-requests-on-behalf-of-a-user","title":"Implementing API requests on behalf of a user","text":"<p>It is possible to use your OAuth2 client to allow a user to login and access data from their own account, such as is done with the LightFi Dashboard.</p> <p>For an application of this type, where user interaction is expected regularly, using a shorter refresh token lifetime such as 30 days will enhance security.</p>"},{"location":"API/#implementing-a-machine-to-machine-api-shim-using-a-refresh-token","title":"Implementing a machine-to-machine API shim using a refresh token","text":"<p>To implement a machine-to-machine API shim using OAuth2 refresh tokens, you would need to do the following:</p> <ol> <li> <p>Obtain an OAuth2 client ID and client secret from LightFi for this purpose.</p> </li> <li> <p>Use the client ID and secret to request an access token and refresh token from the OAuth2 server.   This is done by sending a request to the server's OAuth2 token endpoint   (<code>oauth_url</code> provided with your client credentials),   along with the appropriate grant type (\"Authorization Code\") and other required parameters.   Example of how to do this using Postman or python can be found here.</p> </li> <li> <p>Store the refresh token securely.   This is important because the refresh token can be used to obtain new access tokens,   so it should not be shared with anyone else.</p> </li> <li> <p>Use the access token to make requests to the API.   This is done by including the access token in the authorization header of the HTTP request.</p> </li> <li> <p>When the access token expires, use the refresh token to request a new access token from the server.   This is done by sending a request to the server's OAuth2 token endpoint,   along with the appropriate grant type (\"refresh_token\").   An example of how to do this using Postman can be found here,   but this should be built in to your application so that it happens automatically when the access token is close   to expiry, for example see python client.</p> </li> <li> <p>Update your application to use the new access token for subsequent API requests.</p> </li> </ol> <p>By implementing this process, your application will be able to securely access the API using OAuth2 refresh tokens, allowing it to continue making requests even after the original access token has expired. For an application of this type, where user interaction is not expected, using a longer refresh token lifetime such as 10 years will allow the shim layer to keep operating without any need for user interaction.</p>"},{"location":"API/client_example/","title":"API Client Example","text":"<p>Below are some basic examples of how to get started writing an API client for the LightFi API using python or typescript.</p>"},{"location":"API/client_example/#python-example-api-client","title":"Python Example API Client","text":""},{"location":"API/client_example/#install-openapi-generator","title":"Install OpenAPI generator","text":"<p>See instructions from OpenAPITools</p>"},{"location":"API/client_example/#generate-a-client","title":"Generate a client","text":"<p>An API client for python can be generated using the following example command:</p> <p><code>openapi-generator-cli generate -i https://apiv2.lightfi.io/openapi.json -g python --additional-properties=floatStrictType=false -o python_api_client</code></p> <p>After generating the API client, see the generated documentation for more info at <code>python_api_client/README.md</code></p>"},{"location":"API/client_example/#client-script","title":"Client script","text":""},{"location":"API/client_example/#basic-starting-place","title":"Basic starting place","text":"<p>A basic example script to make an API call using python3</p> <pre><code>import openapi_client\nfrom openapi_client.rest import ApiException\nfrom pprint import pprint\n\nconfiguration = openapi_client.Configuration(\n    host = \"https://apiv2.lightfi.io\"\n)\n\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n\n# Enter a context with an instance of the API client\nwith openapi_client.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = openapi_client.DefaultApi(api_client)\n    try:\n        api_response = api_instance.read_base_location_properties_locations_get()\n        print(\"The response of DefaultApi-&gt;read_base_location_properties_locations_get:\\n\")\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling DefaultApi-&gt;read_base_location_properties_locations_get: %s\\n\" % e)\n</code></pre>"},{"location":"API/client_example/#access-token-expiry-checking","title":"Access token expiry checking","text":"<p>You can use a function like the following to check whether your access token is expired and needs refreshing</p> <pre><code>import jwt  # pyJWT\nfrom time import time\ndef check_token_expired(token: str):\n    unverified_claims = jwt.decode(token, options={\"verify_signature\": False})\n    exp = unverified_claims.get('exp', 0)\n    if exp &gt; (time() + 10):  # 10 seconds margin\n        return False  # Token is not expired\n    return True  # Token expired or will expire in the next 10s\n</code></pre>"},{"location":"API/client_example/#using-a-refresh-token","title":"Using a refresh token","text":"<p>To handle obtaining a new <code>access_token</code> using your <code>refresh_token</code> (see Obtaining an OAuth2 refresh token) you can use code like the following:</p> <pre><code>import httpx\nimport os\n\ndef refresh_oauth2_token(token_url: str, client_id: str, client_secret: str, refresh_token: str):\n    data = {\n        'grant_type': 'refresh_token',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'refresh_token': refresh_token,\n    }\n\n    response = httpx.post(token_url, data=data)\n\n    if response.status_code == 200:\n        token_data = response.json()\n        access_token = token_data['access_token']\n        return access_token\n    else:\n        raise Exception(f\"Failed to refresh OAuth2 token: {response.text}\")\n\n# Example usage, set the environment variables with your values:\ntoken_url = \"https://lightfiv2.auth.eu-west-2.amazoncognito.com/oauth2/token\"\nclient_id = os.environ[\"CLIENT_ID\"]\nclient_secret = os.environ[\"CLIENT_SECRET\"]\nrefresh_token = os.environ[\"REFRESH_TOKEN\"]\n\naccess_token = refresh_oauth2_token(token_url, client_id, client_secret, refresh_token)\n</code></pre>"},{"location":"API/client_example/#periodic-api-polling-with-automatic-token-refresh","title":"Periodic API polling with automatic token refresh","text":"<p>Combining the token validation and refreshing mechanisms, we can design a wrapper that automatically manages token acquisition for a long-running client that periodically fetches data. In the following example, the client polls for a new Carbon Dioxide reading from a sensor every minute and logs any new readings to the console:</p> <pre><code>import os\nimport time\nfrom datetime import datetime\nfrom typing import Callable, TypeVar\n\nT = TypeVar(\"T\")  # To allow linter to recognise return types from API wrapper\n\nimport httpx\nimport jwt  # pyJWT\n\nimport openapi_client\nfrom openapi_client.models.var_name import VarName\nfrom openapi_client.rest import ApiException\n\n\ndef check_access_token_expired(token: str | None) -&gt; bool:\n    if token is None:\n        return True\n    unverified_claims = jwt.decode(token, options={\"verify_signature\": False})\n    exp = unverified_claims.get(\"exp\", 0)\n    if exp &gt; (time.time() + 10):  # 10 seconds margin\n        return False  # Token is not expired\n    return True  # Token expired or will expire in the next 10s\n\n\ndef refresh_oauth2_token(token_url: str, client_id: str, client_secret: str, refresh_token: str):\n    data = {\n        \"grant_type\": \"refresh_token\",\n        \"client_id\": client_id,\n        \"client_secret\": client_secret,\n        \"refresh_token\": refresh_token,\n    }\n\n    response = httpx.post(token_url, data=data)\n\n    if response.status_code == 200:\n        token_data = response.json()\n        access_token = token_data[\"access_token\"]\n        return access_token\n    else:\n        raise Exception(f\"Failed to refresh OAuth2 token: {response.text}\")\n\n\nclass OAuthAPI:\n    def __init__(\n        self, host: str, token_url: str, client_id: str, client_secret: str, refresh_token: str\n    ):\n        self.configuration = openapi_client.Configuration(host=host)\n        self.token_url = token_url\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.refresh_token = refresh_token\n        self.access_token = None\n\n    def refresh_access_token(self):\n        self.access_token = refresh_oauth2_token(\n            self.token_url, self.client_id, self.client_secret, self.refresh_token\n        )\n        self.configuration.access_token = self.access_token\n\n    def call(self, api_call: Callable[..., T], *args, **kwargs) -&gt; T:\n        if check_access_token_expired(self.access_token):\n            self.refresh_access_token()\n\n        try:\n            with openapi_client.ApiClient(self.configuration) as api_client:\n                return api_call(api_client, *args, **kwargs)\n        except ApiException as e:\n            if e.status == 401:  # Unauthorized, access token might have expired\n                self.refresh_access_token()\n                with openapi_client.ApiClient(self.configuration) as api_client:\n                    return api_call(api_client, *args, **kwargs)\n            else:\n                raise e\n\n\n# Initialize OAuthAPI instance\nhost = \"https://apiv2.lightfi.io\"\ntoken_url = \"https://lightfiv2.auth.eu-west-2.amazoncognito.com/oauth2/token\"\nclient_id = os.environ[\"CLIENT_ID\"]\nclient_secret = os.environ[\"CLIENT_SECRET\"]\nrefresh_token = os.environ[\"REFRESH_TOKEN\"]  # Remember to keep token up to date as required for your client settings\napi = OAuthAPI(host, token_url, client_id, client_secret, refresh_token)\n\n\ndef get_sensor_latest_data(api_client, sensor_id):\n    api_instance = openapi_client.DefaultApi(api_client)\n    return api_instance.read_latest_sensor_information_sensors_sensor_id_get(\n        sensor_id, project=[\"latest\", \"value\"]\n    )\n\n\nsensor_id = \"AQ2-FE753C0D7ADF\"\n\ntimestamp, timestamp_last = None, None\nvalue = None\nwhile True:\n    api_response = api.call(get_sensor_latest_data, sensor_id)\n    if api_response.data is not None:\n        for datum in api_response.data:\n            if datum.var_name == VarName.CO2PPM:\n                if datum.time is not None and datum.value is not None:\n                    timestamp = datetime.fromtimestamp(datum.time).strftime(\"%Y-%m-%d %H:%M:%S\")\n                    value = datum.value\n    if timestamp != timestamp_last:\n        print(f\"{timestamp} CO2 level: {value} ppm\")\n        timestamp_last = timestamp\n    time.sleep(60)\n</code></pre>"},{"location":"API/client_example/#typescript-example-api-client","title":"Typescript Example API Client","text":""},{"location":"API/client_example/#install-openapi-generator_1","title":"Install OpenAPI generator","text":"<p>See instructions from OpenAPITools</p>"},{"location":"API/client_example/#generate-a-client_1","title":"Generate a client","text":"<p>An API client for typescript can be generated using the following example command:</p> <p><code>openapi-generator-cli generate -i https://apiv2.lightfi.io/openapi.json --generator-name typescript-axios -o src/services/api</code></p>"},{"location":"API/client_example/#client-script_1","title":"Client Script","text":""},{"location":"API/client_example/#necessary-variables","title":"Necessary variables","text":"<pre><code>API_URL= https://apiv2.lightfi.io\nAPI_AUTH_TOKEN_URL= https://lightfiv2.auth.eu-west-2.amazoncognito.com/oauth2/token\nAPI_TOKEN_CLIENT_ID= {{ To be accessed via administration }}\nAPI_TOKEN_CLIENT_SECRET = {{{{ To be accessed via administration }}}}\nAPI_REFRESH_TOKEN = {{ See documentation for how to obtain }}\n</code></pre>"},{"location":"API/client_example/#get-refresh-token","title":"Get Refresh Token","text":"<p>To obtain the refresh token see the documentation examples for Postman or python here.</p>"},{"location":"API/client_example/#get-access-token","title":"Get Access Token","text":"<p>After generating refresh token. Access token can be generated using following function:</p> <pre><code>const  getAccessToken = async () =&gt; {\n    const  accessToken = await  fetch(process.env.API_AUTH_TOKEN_URL, {\n        method:  \"POST\",\n        headers: {\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n        },\n        body:  new  URLSearchParams({\n            grant_type:  \"refresh_token\",\n            client_id:  API_TOKEN_CLIENT_ID,\n            client_secret:  API_TOKEN_CLIENT_SECRET,\n            refresh_token:  AUTHORIZATION_REFRESH_TOKEN,\n        }),\n    })\n        .then((response) =&gt;  response.json())\n        .then((data) =&gt;  data.access_token);\n    return  accessToken;\n};\n</code></pre> <p>[ Note: For continuously running application, <code>accessToken</code> expiry is also available within the response json. It can be stored as variable and generate accessToken only upon expiration]</p> <p>Generated Access token can be finally used to create api config and perform API calls</p> <pre><code>const  apiConfig = async () =&gt;\n    new  Configuration({\n        basePath:  API_URL,\n        accessToken:  await  getAccessToken(),\n    });\n\nconst  apiService = async () =&gt;  new  DefaultApi(await  apiConfig());\n</code></pre>"},{"location":"API/client_example/#example-api-call","title":"Example API Call","text":"<p>For instance to receive location properties from api call:</p> <pre><code> const getLocationProperties = async(locationId:string): Promise&lt;LocationOutput&gt; =&gt; {\n    const apiServiceConfig = await apiService();\n    const {data} = await apiServiceConfig\n        .readLocationProperties(locationId)\n        .catch((res) =&gt; throw new Error(res);\n    return data;\n}\n</code></pre>"},{"location":"API/client_refresh_token/","title":"Obtaining OAuth2 refresh_token","text":"<p>A refresh token can allow programmatic access to the API for the lifetime of the token (up to 10 years, depending on the client configuration). The <code>refresh_token</code> is used to obtain an <code>access_token</code> (via the <code>oauth_url</code>). The <code>access_token</code> can then be used with the LightFi API.</p> <p>Obtaining a refresh token requires the user to login with a web-browser at the secure URL, a callback URL is then used to complete the login process and obtain the tokens. You should consider what is the best login process for your application, below are two examples of how to obtain a refresh token this using Postman and python/flask.</p>"},{"location":"API/client_refresh_token/#using-postman-to-obtain-an-oauth2-refresh-token","title":"Using Postman to obtain an OAuth2 refresh token","text":"<p>To obtain a refresh token in Postman (the Postman OAuth login callback URL is allowed in default client settings, but can be disabled on request) use the following configuration.</p>"},{"location":"API/client_refresh_token/#obtaining-a-refresh-token","title":"Obtaining a refresh token","text":""},{"location":"API/client_refresh_token/#oauth-setup","title":"OAuth Setup","text":"<p>Configure the Authorization in Postman in the following way:</p> <p></p>"},{"location":"API/client_refresh_token/#oauth-variables","title":"OAuth Variables","text":"<p>You should define the variables used in the OAuth config according to the client details you have been sent by LightFi.</p> <p></p>"},{"location":"API/client_refresh_token/#using-the-refresh-token","title":"Using the refresh token","text":"<p>Use the <code>oauth_url</code> to obtain an <code>access_token</code> using your <code>refresh_token</code>, this can then be used to make calls to the API. You do not need to do this in Postman (a python example can be found here), but the following images show how to use Postman to obtain a new <code>access_token</code></p> <p></p> <p></p>"},{"location":"API/client_refresh_token/#using-pythonflask-to-obtain-an-oauth2-refresh-token","title":"Using Python/Flask to obtain an OAuth2 refresh token","text":"<ul> <li>Make sure you have python and flask installed, either globally or in a python virtual environment.</li> <li>e.g. To install in a python virtual environment using pip   <pre><code>python -m venv venv  # Create virtual environment\nsource venv/bin/activate\npip install flask requests\n</code></pre></li> <li>The default script (below) obtains <code>CLIENT_ID</code> and <code>CLIENT_SECRET</code> from environment variables, so set these in your environment. <pre><code>export CLIENT_ID=YOUR_CLIENT_ID\nexport CLIENT_SECRET=YOUR_CLIENT_SECRET\n</code></pre></li> <li>Save the script (below) e.g. as <code>oauth_obtain_refresh_token.py</code></li> <li>Run the script and navigate to http://localhost:3000 in web browser to begin the login process (the URL can be changed but make sure that the URL you use is registered as a <code>callback_url</code> for your API client). <pre><code>python oauth_obtain_refresh_token.py\n</code></pre></li> </ul> <pre><code>import json\nimport os\n\nimport requests\nfrom flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n# Client details in environment variables (or edit the lines for your client)\nCLIENT_ID = os.environ[\"CLIENT_ID\"]\nCLIENT_SECRET = os.environ[\"CLIENT_SECRET\"]\n\n# Default details\nREDIRECT_URI = \"http://localhost:3000\"  # Must be registered as a callback_url for your client\nOAUTH_URL = \"https://lightfiv2.auth.eu-west-2.amazoncognito.com/oauth2\"\nAUTH_URL = f\"{OAUTH_URL}/authorize\"\nTOKEN_URL = f\"{OAUTH_URL}/token\"\nSCOPE = \"aws.cognito.signin.user.admin\"\n\n\n@app.route(\"/\")\ndef home():\n    code = request.args.get(\"code\")\n    if code:\n        # User is redirected back to your app with authorization code\n        # Get the access and refresh tokens\n        payload = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": REDIRECT_URI,\n            \"client_id\": CLIENT_ID,\n            \"client_secret\": CLIENT_SECRET,\n        }\n        response = requests.post(TOKEN_URL, data=payload)\n        tokens = json.loads(response.text)\n\n        # Print the tokens\n        return f\"Access Token:&lt;br/&gt;{tokens.get('access_token')}&lt;br/&gt;&lt;br/&gt;Refresh Token:&lt;br/&gt;{tokens.get('refresh_token')}\"\n    else:\n        # Redirect user to service's authentication page\n        return redirect(\n            f\"{AUTH_URL}?response_type=code&amp;client_id={CLIENT_ID}&amp;scope={SCOPE}&amp;redirect_uri={REDIRECT_URI}\"\n        )\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, port=3000)\n    # Open http://localhost:3000 in your browser to obtain tokens\n</code></pre>"},{"location":"API/data/","title":"Sensor Data","text":"<p>Each sensor may report multiple data of different types e.g. temperature, humidity, battery level and sensor status. These data types (called <code>var_name</code> in the API) can be obtained independently for each sensor (including historic and daily metric data) or all the latest values can be listed for a sensor or location (including all sensors in a location), the latter route being very useful for e.g. the construction of live dashboards indicating all sensor data on a floor.</p>"},{"location":"API/data/#available-data-var_name-types","title":"Available data / <code>var_name</code> types","text":"<code>var_name</code> Example Value Unit Description <code>BACnetReads</code> 10 count number of BMS queries of this sensor in the last period <code>batteryLevelPct</code> 90 % approximate percentage of battery remaining for battery powered sensors <code>CO2ppm</code> 850 ppm measured Carbon Dioxide concentration in parts per million <code>clientsBLE</code> 20 count number of occupancy indicating devices observed on BLE <code>clientsWiFi</code> 20 count number of occupancy indicating devices observed on WiFi <code>energyInkWh</code> 2000.0 kWh Total energy consumed (directional rather than net) e.g. electricity meter reading <code>illuminanceArb</code> 20.0 arbitrary measured light level <code>motionEvent</code> 1 arbitrary Each data point indicates a detected motion event, the value can be ignored but gives an indication of the number of recent events (see below) <code>occSignatures</code> 2 count measured signatures (people) under the sensor <code>onlineStatus</code> 1 enum Indicates online status of the sensor (1 = online, 0 = offline, -1 = rebooting, -2 = retired) <code>particulateMatter</code> 10 \u00b5g/m\u00b3 measured particulate matter level (PM2.5 - PM1/PM10 may be available as extra data) <code>pressuremBar</code> 1000 mBar measured air pressure <code>relativeHumidity</code> 50.0 % measured relative humidity of air <code>temperatureC</code> 20.1 \u2103 measured temperature <code>VOCppb</code> 1000 ppb measured Volatile Organic Compounds concentration in parts per billion"},{"location":"API/data/#motionevent-data","title":"<code>motionEvent</code> data","text":"<p><code>motionEvent</code> data (as returned by PIR motion sensors) is slightly different from most other data in that the main significance is the timestamp of the recorded data, with the given value not so significant. The raw live and historic <code>motionEvent</code> data should be thought of more as an event list: every data item, indicates a detected motion event. Note: <code>motionEvent</code>s are throttled by default to only record one event per 10 seconds, so after the first event the sensor itself may detect several instances of motion in the next 10 seconds but you will only receive the next <code>motionEvent</code> for an event at least 10 seconds after the first one.</p> <p>Returning data in this way can be an advantage as it allows the user to create applications where a custom timeout threshold for \"Occupied\"/\"Unoccupied\" can be specified. For example, on LightFi portal you can use the sliders on the dashboard page in the \"Motion Events\" data dropdown to select e.g. \"Occupied\" if motion within the last 10 minutes and \"Available\" if no motion within the last 2 hours, allowing a live dashboard that can be suited to the customer preference. Note: The complication with returning data in this way that if the sensor is \"offline\" (onlineStatus not equal to 1) then you need to know this too in order to distinguish between \"no motionEvent\" and \"missing sensor\".</p>"},{"location":"API/data/#motionevent-value","title":"<code>motionEvent</code> value","text":"<p>The numeric value returned when querying raw live/historic <code>motionEvent</code> data is generally not needed but does give an indication of the number of recent motion events. The value is derived from a running count of motion events recorded by the sensor scaled using the following formula to reset/reduce the count after a period of inactivity:</p> <p><pre><code>  value = last_value * min(1, 600 / (max(timestamp - last_time, 1))) + 1\n</code></pre> (<code>timestamp</code> and <code>last_time</code> in seconds, <code>last_value</code> and <code>last_time</code> will be 0 for first data, <code>value</code> is always rounded to the nearest integer)</p> <p>Thus if the count will always increase by 1 for every event seen less than 10 minutes (600 seconds) after the previous but will decrease for events seen after longer time gaps (likely resetting to 1 if the gap is significantly longer than 10 minutes). This allows a quick view of the occupancy level of a space, distinguishing between sensors that have been observing longer periods of occupancy and those with only infrequent events.</p>"},{"location":"API/data/#utilisation-metric-data-daily-routes","title":"Utilisation metric data (<code>/daily</code> routes)","text":"<p>In order to calculate useful utilisation data for the metric routes available e.g. for a sensor or for a whole floor a fixed threshold timeout for occupancy indication has been used. Utilisation (<code>utl</code>) percentage numbers returned by these routes are calculated based on a 10 minute threshold i.e. if there is less than 10 minutes between motion events the desk will be counted as in use, if more than 10 minutes as not in use.</p> <p>These routes allow you to restrict the hours and days for which the overall data is calculated, as is possible for other data/<code>var_name</code>, unlike other data the values are returned as <code>utl</code> (percentage utilisation) rather than <code>min</code>/<code>avg</code>/<code>max</code> values during the time period.</p> <p>If you desire to implement your own utilisation metric calculations with a different \"no presence\" timeout, you are still able to do this from the raw historic motionEvents data. (Though doing so will obviously be slower than using the pre-calculated values.)</p> <p>Note: <code>utl</code> values are reported as a decimal between 0 and 1 indicating the percentage occupancy in that hour e.g. 0.79 is 79% utilised. Since this numbers are calculated for the timezone of the sensor, in regions with daylight savings time it is possible to get a <code>utl</code> value up to a maximum of 2 for the hour when the clocks go back, since this hour will occur 'twice' during that night.</p>"},{"location":"dashboard/","title":"LightFi Dashboard/Portal","text":"<p>The LightFi Dashboard can be found at https://portal.lightfi.io</p> <p>You require a login to use the dashboard, user accounts will be created for your organisation with your initial sensor purchase. Additional accounts can be created by the Admin user(s) of you organisation.</p>"},{"location":"dashboard/#general-concepts","title":"General Concepts","text":""},{"location":"dashboard/#choosing-the-location","title":"Choosing the location","text":"<p>Use the selector in the top left to choose your location. Each location can have sub-locations, this is usually indicated by an \"ALL\" drop-down, use the drop-down to select the sub-location you are particularly interested in. Repeat the process if you want to keep going to more more specific locations. A typical location structure may be something like:</p> <ul> <li>Organisation Name &gt; Site &gt; Building &gt; Floor</li> </ul>"},{"location":"dashboard/#data-sources","title":"Data sources","text":"<p>You can add or remove data you are interested in using the \"Sources\" button. For example if you are interested in viewing Occupancy but not Environmental data, you can add WiFi Occupancy and Motion Events but remove Temperature.</p> <p>List of possible data sources:</p> Source Name Example Value Unit Description BACnet 10 count number of BMS queries of this sensor in the last period Battery 90 % approximate percentage of battery remaining for battery powered sensors Bluetooth Occupancy 20 count number of occupancy indicating devices observed on BLE CO\u2082 850 ppm Carbon Dioxide concentration (parts per million) Humidity 50.0 % relative humidity of the air Light level 20.0 arbitrary measured light level Motion Events 1 arbitrary Used to display data from PIR motion sensors. Online Status Online none Indicates the status of the sensor Pollutants 10 \u00b5g/m\u00b3 particulate matter level (PM2.5) Pressure 1000 mBar measured air pressure Temperature 20.1 \u2103 measured temperature Thermal Signatures 2 count Used for HAL sensors to indicate number/position of detected people in field of view of the sensors Volatile Organic Compounds 1000 ppb measured Volatile Organic Compounds concentration in parts per billion WiFi Occupancy 20 count number of occupancy indicating devices observed on WiFi"},{"location":"dashboard/#user-details","title":"User Details","text":"<p>Click your user name (top right) to select user features.</p>"},{"location":"dashboard/#changing-password","title":"Changing Password","text":"<p>You can change your password from the \"User Profile\" screen.</p>"},{"location":"dashboard/#setting-two-factor-authentication-2fa-mfa","title":"Setting Two Factor Authentication (2FA / MFA)","text":"<p>You can setup two factor authentication for your login on the \"User Profile\" screen. You should use a TOTP application such as Google Authenticator or Password Manager for iPhone/Mac to set this up.</p>"},{"location":"dashboard/#views","title":"Views","text":""},{"location":"dashboard/#dashboard-screen","title":"Dashboard Screen","text":"<p>Shows detailed live data for the selected location (drop-downs include sub-locations, map only shows the current location).</p>"},{"location":"dashboard/#compare-screen","title":"Compare Screen","text":"<p>Used to graph different data and compare them. Data sources, sensors and time range you would like to compare data over. Can also generate a report for the selected data and time range by selecting \"Show Report\" button.</p>"},{"location":"dashboard/#calendar-view-screen","title":"Calendar View Screen","text":"<p>Used to view longer term metric data for a selected Data Source (click on the selector on the Map to change selected data). Can be used to compare typical values for Weekdays i.e. averaging all Mondays together etc. or to compare days in a calendar format.</p>"},{"location":"dashboard/#summary-screen","title":"Summary Screen","text":"<p>Simplified live information about current conditions in a location. Useful for mobile phone view.</p>"},{"location":"dashboard/#sensor-info","title":"Sensor Info","text":"<p>Information about different sensor types.</p>"},{"location":"dashboard/#configuration-screen-admin","title":"Configuration Screen (Admin)","text":"<p>Used to configure sensors and locations.</p>"},{"location":"dashboard/floorplans/","title":"Floorplans (GeoJSON)","text":"<p>Floorplans that can be uploaded and displayed on the LightFi dashboard (or used with the API) should be specified using the GeoJSON open standard format. This means that all features are positioned in geographic location on the globe and can be shown on a real map.</p> <p>LightFi can digitalise a floorplan on request, please contact us to arrange this. If you would prefer to construct your own floorplans, use the following specification as a guide.</p>"},{"location":"dashboard/floorplans/#geojson-format","title":"GeoJSON Format","text":"<p>The GeoJSON format can support many features and geometries but the primary one used for floorplan specification is the <code>Polygon</code> geometry feature. Below is a basic example of a floorplan containing one desk polygon:</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": \"unique_integer_or_string\",\n        \"type\": \"furniture.desk\"\n        \"name\": \"Example Desk\"\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -0.103376033390241,\n              51.50396850728883\n            ],\n            [\n              -0.103387610110273,\n              51.50396879686363\n            ],\n            [\n              -0.103386599740581,\n              51.503986332674764\n            ],\n            [\n              -0.103375018922765,\n              51.50398604299897\n            ],\n            [\n              -0.103376033390241,\n              51.50396850728883\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>TIP: A useful site for testing your basic GeoJSON layout is https://geojson.io</p>"},{"location":"dashboard/floorplans/#feature-properties","title":"Feature properties","text":""},{"location":"dashboard/floorplans/#id","title":"<code>id</code>","text":"<p>All polygons that might be assigned to a particular sensor e.g. room or desk polygons, must have a unique <code>id</code> assigned to them. The <code>id</code> should be assigned as shown in the example above, should be unique (on the floorplan) and can be either integer or string type. Note: the <code>id</code> can also be assigned at the root level of the feature rather than in the properties, if needed, we prefer keeping the feature properties together in the <code>\"properties\"</code> section.</p>"},{"location":"dashboard/floorplans/#name","title":"<code>name</code>","text":"<p>It is possible to give the polygon feature a name, this can be useful for organising and identifying features on the floorplan, allowing rooms etc. to be given their name. This is not currently used by the LightFi front-end but could be used in future.</p>"},{"location":"dashboard/floorplans/#type","title":"<code>type</code>","text":"<p>The feature type allows the polygons to be visualised and used for interaction on the dashboard. All features should be assigned a type so that they can be properly displayed. Feature types are listed below.</p>"},{"location":"dashboard/floorplans/#feature-types","title":"Feature types","text":"<p>All features should specify a type in order to be properly displayed. Ideally a complete floorplan will specify each of these types (unless they do not exist in the real space) in order to present the richest experience to the user.</p> Feature type <code>id</code> guide Description <code>area.floor</code> 1000-1999 Should be used for a polygon covering the whole outline of the floor <code>area.room</code> 2000-2999 Each room should have a separate polygon of this type <code>area.toilet</code> 2000-2999 Similar to <code>area.room</code> but used for WCs to allow icon on the map <code>area.toilet.w</code> 2000-2999 Similar to <code>area.toilet</code> used for female toilets <code>area.toilet.m</code> 2000-2999 Similar to <code>area.toilet</code> used for male toilets <code>area.toilet.d</code> 2000-2999 Similar to <code>area.toilet</code> used for disabled toilets <code>area.stairs</code> none Allows stairs icons to be added to the floorplan display <code>area.lift</code> none Allows lift/elevator icons to be added to the floorplan display <code>wall</code> none Adding walls to the floorplan gives a nicer 3D visualisation and feel for the user <code>window</code> none Similar to walls, gives greater richness to the floorplan if used in combination <code>furniture.desk</code> 90001-99999 Each desk should have a separate polygon of this type <p>Note: A unique <code>id</code> should be included for each polygon where interaction may be required (e.g. rooms/desks, see above), no specific value for the <code>id</code> is required, some typical values used on floorplans are shown for guidance.</p>"},{"location":"sensors/","title":"Sensor Overview","text":"<p>LightFi produce a range of sensors for gathering building data and facilitation of building control via integration with the Building Management System (BMS)</p>"},{"location":"sensors/#lightfi-base-base-pro","title":"LightFi BASE / BASE Pro","text":"<p>The LightFi \"BASE\" sensor is a long-range, broad level occupancy sensor, which determines the occupancy levels by measuring the number active devices on a floor area, with coverage of 250 \u2013 1000 square meters depending on placement and number of walls etc. (the sensors can function through walls but the range is reduced).</p> <p>The BASE sensor also functions as a router/gateway for LightFi sensors, reporting data to the cloud and allowing configuration of sensor settings and sub-sensors via the portal or API interface. Each base can support 100s of wireless sub-sensors.</p> <p>If BACnet enabled [BASE Pro only], this sensor will also function as a BACnet/IP router device, with it\u2019s own BACnet network number (configurable via LightFi Portal). This will allow the BASE sensor itself and all configured sub-sensors to be accessible via BACnet/IP (BACnet object description).</p>"},{"location":"sensors/#what-is-included","title":"What is included","text":"<p>The BASE sensor comes with a power supply (optional) and a mounting bracket.</p>"},{"location":"sensors/#placement","title":"Placement","text":"<p>For a detailed description of where sensors should be located within the building see Install Planning.</p> <p>The BASE sensor is designed to be ceiling mounted. The range of the sensors means placement can be flexible and adjusted to be closest to suitable cabling and mounting points. A typical install location is similar to WiFi Access Points.</p>"},{"location":"sensors/#power","title":"Power","text":"<p>The BASE sensor can be powered via DC power input or Power over Ethernet (PoE) 802.3af (48V) via the PoE Port. In almost all instances, we recommend using PoE, as this will provide data and power over a single cable and can be provided by affordable and readily available PoE network switches. Where PoE is not available the device can be powered using the DC power input port (it is not necessary, or desirable, to power using both PoE and DC input simultaneously).</p> <p></p>"},{"location":"sensors/#lightfi-alpine","title":"LightFi Alpine","text":"<p>The Alpine is a battery powered sensor that measures: Carbon Dioxide (CO\u2082) levels with a dual-channel NDIR sensor, Temperature and Relative Humidity.</p> <p>The sensor requires a configuration with a LightFi BASE Sensor in order to be visible on the BACnet network.</p>"},{"location":"sensors/#power-on","title":"Power-on","text":"<p>Using the button that is inside the sensor box, next to the battery holder. Please take off the front plate to access.</p> <ul> <li>ON: press-and-hold the button, LED will long-blink once</li> <li>OFF: press-and-hold the button, LED will blink twice</li> </ul> <p>If BACnet enabled, this sensor will appear as a BACnet/IP device on the BACnet network created by the BACnet router internal to the BASE Sensor (BACnet object description).</p>"},{"location":"sensors/#lightfi-sahara","title":"LightFi Sahara","text":"<p>The Sahara sensor measures: Carbon Dioxide (CO\u2082) levels with a dual-channel NDIR sensor and Particulate Matter (PM2.5).</p> <p>The sensor requires a configuration with a LightFi BASE Sensor in order to be visible on the BACnet network.</p> <p>If BACnet enabled, this sensor will appear as a BACnet/IP device on the BACnet network created by the BACnet router internal to the BASE Sensor (BACnet object description).</p>"},{"location":"sensors/#lightfi-hoth","title":"LightFi Hoth","text":"<p>The Hoth sensor measures temperature, relative humidity and its own battery level.</p> <p>The sensor requires a configuration with a LightFi BASE sensor in order to be visible on the BACnet network.</p> <p>If BACnet enabled, this sensor will appear as a BACnet/IP device on the BACnet network created by the BACnet router internal to the BASE sensor (BACnet object description).</p>"},{"location":"sensors/#lightfi-x1","title":"LightFi X1","text":"<p>The X1 is a battery powered Passive Infrared (PIR) motion sensor, designed to detect binary desk or room occupancy. </p> <p>The sensor requires a configuration with a LightFi BASE sensor in order to be visible on the BACnet network.</p> <p>If BACnet enabled, this sensor will appear as a BACnet/IP device on the BACnet network created by the BACnet router internal to the BASE sensor (BACnet object description).</p>"},{"location":"sensors/#power_1","title":"Power","text":"<p>Pressing on the front face of the sensor will activate the button - you will hear a click. Use this button to turn the sensor:</p> <ul> <li>ON: press the front face once, blue LED will blink once</li> <li>OFF: double press the front face, blue LED will blink twice</li> </ul>"},{"location":"sensors/#install-guide","title":"Install guide","text":"<p>See Installation</p> <p>For more information on BACnet objects for these devices, check the BACnet section.</p>"},{"location":"sensors/01_install_planning/","title":"Install Planning","text":""},{"location":"sensors/01_install_planning/#sensor-layout","title":"Sensor Layout","text":"<p>LightFi sensors split into two categories:</p> <ol> <li>The BASE/BASE Pro device, is a 2-in-1 sensor &amp; controller device, which has 4 functions:   a. receiver/transmitter for LightFi\u2019s wireless sensors,   b. an occupancy level sensor,   c. [BASE Pro] BACnet/IP connection for itself and all wireless sensors to the BMS, and   d. cloud bridge to LightFi\u2019s Portal.</li> <li>The wireless sensors, send data to the BASE controller/sensor for granular control and monitoring.</li> </ol>"},{"location":"sensors/01_install_planning/#base-devices","title":"BASE devices","text":"<p>The BASE/BASE Pro devices cover a 20m \u2013 30m diameter area for both detecting occupancy levels and receiving signals from LightFi\u2019s wireless sensors.</p> <p>Planning full floor coverage will ensure robustness and future adaptability. Please use the following criteria when laying out the BASE Pro devices on a floor plan:</p> <ul> <li>For open plan areas, one BASE Pro is sufficient every 30 meters (15m radius)</li> <li>For areas with meeting rooms, one BASE Pro is sufficient every 20 meters (10m radius)</li> <li>Lift shafts, core staircases and other supporting walls can be barriers for wireless signals, it is safest to treat them as impermeable.</li> <li>For large enclosed spaces, such as auditoriums, airport gate rooms, lecture theatres, etc., one BASE Pro is sufficient.</li> </ul> <p>The annotated floor plans below give an example of the number of BASE Pro sensors needed for full coverage of an office floor (with Ethernet cable runs). The BASE Pro is ceiling mounted, and its long detection range allows for flexible placement to utilise existing cabling routes.</p> <p>Base sensor power and placement is described in more detail in the overview.</p>"},{"location":"sensors/01_install_planning/#wireless-sensors","title":"Wireless sensors","text":"<p>The line-of-sight communication capability of the wireless sensors is up to 100m, however, for robustness and continuity please keep wireless sensors within 20m or less of a BASE Pro.</p> <p>These sensors are battery powered (typically 5-years), and measure:</p> <ul> <li>Alpine \u2013 CO\u2082, temperature &amp; relative humidity</li> <li>X1 \u2013 PIR motion, 120-degree view &amp; up to 7m range, ceiling or wall mounted.</li> <li>Hall \u2013 window/door open/close contact</li> </ul> <p>These sensors need local 12-24V DC power, and measure:</p> <ul> <li>Sahara \u2013 CO\u2082, PM1, PM2.5, PM10, TVOC, NOX, temperature &amp; relative humidity, usually for WELL standard certification</li> <li>Radar \u2013 people counting for meeting rooms, ceiling mounted with 120-degree view, typically 6m diameter coverage.</li> </ul> <p>We recommend issuing at least one Alpine sensor per BASE Pro for open plan areas, and as needed for meeting rooms and/or other clients\u2019 needs. Some of the bigger rooms (board rooms, etc) may benefit from more than one CO\u2082 sensor.</p>"},{"location":"sensors/01_install_planning/#sensor-layout-examples","title":"Sensor Layout Examples","text":"<p>The annotated floor plans below give an example of sensor deployments.</p> <p> </p> Example 1 <p> </p> Example 2 <p> </p> Example 3"},{"location":"sensors/01_install_planning/#cabling-topology-for-the-base-sensors","title":"Cabling topology for the BASE sensors","text":"<p>The cabling topology for the BASE sensors will depend on available network ports throughout the building. The BASE sensors are powered with Power over Ethernet (PoE) 802.3af, such that power and data can be handled with a single Ethernet cable.</p> <p> </p> Example 1 <p> </p> Example 2"},{"location":"sensors/01_install_planning/#using-existing-network-ports","title":"Using existing network ports","text":"<p>The simplest install is to utilise any available spare network ports across the building. The BASE sensors can be plugged into existing ports (with PoE) and connected via a VLAN, or directly to a separate LAN (e.g. BMS LAN) at the comms room. If no existing network connections are available, new cables may need to be run.</p>"},{"location":"sensors/01_install_planning/#running-new-cables","title":"Running new cables","text":"<p>The BASE sensors can be ceiling mounted (similar to WiFi Access Points). CAT5E, CAT6 or better network cables need to be run from the BASE sensors to a nearby network connection point, such as a BMS panel or comms room. The network cables will provide power to the BASE sensors, as well as a connection to the internet and BACnet/IP communication with the BMS (where relevant). The cabling topology will depend on the location of available connection ports. Two topology examples are shown above. In the first example a building has a single BMS panel in the plant room, an internet connection in the comms room and network created using individual PoE switches on each floor. In the second example, there is a BMS panel on each floor with a separate internet connection.</p>"},{"location":"sensors/01_install_planning/#next-steps","title":"Next Steps","text":"<p>After planning the install and cabling, it is probably easiest to perform BASE sensor provisioning before installing the sensors to their final location.</p>"},{"location":"sensors/02_base_install/","title":"BASE sensor provisioning","text":"<p>[Note: If ordering BASE sensors for a whole building it is possible to have pre-provisioned BASE sensors, with your required IP network and BACnet settings, shipped directly from LightFi, saving engineer time on your install. Please contact LightFi to arrange this.]</p> <p>To provision the BASE sensor on LightFi\u2019s Portal, you will need the following:</p> <ul> <li>BASE sensor powered and connected to the internet [Note: you may need to change the ip settings on the base sensor to connect to the internet i.e. change from dhcp to static ip, please follow the guide as normal, the BASE network settings are documented at step 4.]</li> <li>Ethernet cable</li> <li>Physical access to the BASE sensor</li> <li>Laptop computer with an Ethernet port and WiFi connection</li> </ul>"},{"location":"sensors/02_base_install/#1-power-sensor","title":"1 - Power sensor","text":"<p>Please ensure the BASE sensor is powered and connected to the internet. The LEDs indicate the status of the BASE sensor:</p> <ul> <li>First LED on \u2013 the BASE sensor indicates power</li> <li>Second LED on \u2013 the BASE sensor is connected to the internet</li> <li>Third LED on \u2013 the BASE sensor is detecting occupancy. Once plugged in, please allow 5 minutes for the boot sequence to finish before any troubleshooting.</li> </ul>"},{"location":"sensors/02_base_install/#2-setup-service-port-connection","title":"2 - Setup service port connection","text":"<p>[Note: Before you make the changes to your network configuration on your computer, note down the existing network settings, this will help when resetting them back afterwards.]</p> <p>Please ensure your computer is connected to the internet e.g. via WiFi. Setup your computer\u2019s wired (Ethernet) network settings to enable connection to the BASE sensor via its Service Port. Change the LAN configuration settings on your computer to \u201cmanual\u201d and use the static IP Address: 192.168.151.2 and press Apply. (Use a default Subnet Mask of 255.255.255.0 and leave the other settings empty, as there is no internet connection from the BASE sensor via the Service Port for security reasons). Your LAN settings are located in:</p> <ul> <li>Apple: System Preferences &gt; Network &gt; {your LAN Service} &gt; Configure IPv4 : Manually</li> <li>Windows: Windows Settings &gt; Network &amp; Internet &gt; Advanced network settings : Change adapter options &gt; Ethernet : Properties &gt; Internet Protocol Version 4 (TCP/IPv4) : Properties &gt; Use the following IP address</li> </ul> <p></p>"},{"location":"sensors/02_base_install/#3-connect-to-sensor","title":"3 - Connect to sensor","text":"<p>Connect an Ethernet cable from your computer to the Service Port on the BASE sensor. Please ensure the PoE Port is also connected to the internet.</p>"},{"location":"sensors/02_base_install/#4-launch-provisioner","title":"4 - Launch Provisioner","text":"<p>Please open your web browser and enter http://192.168.151.1 into the address bar. You will be greeted by the BASE sensor\u2019s service page, indicating that you are now connected to the BASE sensor and the BASE sensor is itself connected to the internet. </p> <p></p> <p>If the BASE sensor greeting page says \u201cNo Internet!\u201d, please check the BASE sensor\u2019s PoE Port is connected to the internet and refresh the web-page. You may need to change the device network settings for your network/internet setup, if so click the \"Network Settings\" button, you will require the local config password shipped with your device (the password can be changed from the Network Settings page).</p> <p>To begin provisioning your BASE sensor on LightFi\u2019s Portal, press \u201cDeploy Sensor\u201d. Please ensure your computer is connected to the internet e.g. via WiFi. You will be redirected to the LightFi Portal, where you can login to your LightFi account and create the sensor.</p>"},{"location":"sensors/02_base_install/#5-select-location","title":"5 - Select location","text":"<p>In the top left corner, select the building and floor where you want to create this BASE sensor using the dropdown. Then press \u201cNext\u201d.</p> <p></p>"},{"location":"sensors/02_base_install/#6-add-sensor-details","title":"6 - Add sensor details","text":"<p>Give the BASE sensor a name (usually the name of the area it covers), and press \u201cNext\u201d. Click on the floorplan to give the sensor a position (as close to where it is or to be located so that others can find it later), and then press \u201cPreview\u201d.</p>"},{"location":"sensors/02_base_install/#7-check-details","title":"7 - Check details","text":"<p>Check you\u2019re happy with the details you\u2019ve entered and the location tree in which you\u2019re creating the sensor.</p>"},{"location":"sensors/02_base_install/#8-confirm","title":"8 - Confirm","text":"<p>Press \u201cConfirm Details\u201d and then \u201cCreate\u201d to provision the sensor. Your browser may ask for security confirmation, in which case you will need to allow the connection by pressing \u201cSend Anyway\u201d (or similar).</p>"},{"location":"sensors/02_base_install/#9-provisioning","title":"9 - Provisioning","text":"<p>The BASE sensor is now being provisioned. Please do not unplug the BASE sensor from the computer (or internet) until the web page says that the setup has been completed. The BASE sensor will then reboot. </p> <p>The sensor is now provisioned and should be visible on the LightFi portal. (Please allow up to 5 minutes for the BASE sensor to appear on the LightFi Portal and 10 minutes for the first data to arrive.)</p> <p></p>"},{"location":"sensors/03_subsensor_install/","title":"Installing Wireless Sub-sensors","text":""},{"location":"sensors/03_subsensor_install/#overview","title":"Overview","text":"<p>Installation of LightFi sub-sensors such as Sahara (Air Quality), Alpine (CO\u2082/Temperature/Humidity), Hoth (Temperature/Humidity) or X1 (PIR Motion) can be performed entirely using the LightFi portal.</p> <p>To perform the configuration, you will need the following:</p> <ul> <li>The BASE sensors installed and provisioned</li> <li>Recommended:  A smartphone or similar portable device with the \"LightFi Air\" app from Apple/Google app store. This allows detecting nearby sensors directly from the phone and speeds up the install process.</li> <li>Alternative: Access to the LightFi portal using a web browser, such as from a laptop.</li> <li>An internet connection</li> <li>LightFi Portal account login with admin/installer privileges for the location you wish to install the sensors</li> </ul>"},{"location":"sensors/03_subsensor_install/#place-sensor","title":"Place Sensor","text":"<p>To simplify the installation process keep the sub-sensors unpowered until they are in position. Place the sensor in the room or location you want to monitor, one-by-one power the sensor as per the sensor instructions and install it using the following instructions.</p>"},{"location":"sensors/03_subsensor_install/#installation-using-lightfi-air-mobile-app","title":"Installation using LightFi Air mobile app","text":""},{"location":"sensors/03_subsensor_install/#1-scan-and-select-sensor","title":"1 - Scan and select sensor","text":"<ul> <li>Launch the app and select the appropriate sensor type e.g. Temperature for a sensor with temperature data, to begin scanning for sensors.</li> <li>If you are next to the sensor to install it should appear top of the list with a strong signal.</li> <li>Select the sensor and press the 3 dots to bring up the menu for this sensor</li> <li>Select the 'Install' option from the menu as shown in the image below. (If you have not logged in on the app you may need to select the 'Admin' option first)</li> </ul>"},{"location":"sensors/03_subsensor_install/#2-choose-sensor-location-and-position","title":"2 - Choose sensor location and position","text":"<ul> <li>The app will attempt to find the correct location based on nearby sensors, if the location shown at the top of the screen is not correct e.g. the floor level needs changing, please select the correct location.<ul> <li>Note: If you are not in the correct location or the BASE sensor cannot see the sub-sensor, then you may get a message saying \"Gateway or visible sub-sensor not found\", please check your selected location and BASE sensor connectivity.</li> </ul> </li> <li>Tap on the map where the sensor is located in the building so that the pin is located in the correct position to indicate where the sensor is (the person pin is an estimate of your position and the wedge indicates the position of the BASE sensor the sub-sensor will be associated to).</li> <li>After selecting the correct position, press 'Next'</li> </ul>"},{"location":"sensors/03_subsensor_install/#3-name-sensor","title":"3 - Name sensor","text":"<ul> <li>Add the sensor name</li> <li>Ensure that the Gateway name matches a BASE in the area of the sensor</li> <li>When complete press 'Next'</li> </ul>"},{"location":"sensors/03_subsensor_install/#4-confirm","title":"4 - Confirm","text":"<ul> <li>After you have entered the information the sensor will be added to BASE configuration and the online portal.</li> <li>Please wait for the page to indicate that the sensor has been created and initial data has been received on the platform.<ul> <li>if you have trouble on this step please ensure that the BASE internet connection is working</li> </ul> </li> <li>Once sensor installation is confirmed you may return to the sensors list and install more sensors</li> <li>If you need to configure BACnet details for the sensor please see BACnet documentation </li> </ul>"},{"location":"sensors/03_subsensor_install/#installation-using-web-browser","title":"Installation using web browser","text":""},{"location":"sensors/03_subsensor_install/#1-select-install-location","title":"1 - Select Install Location","text":"<p>Login to your LightFi Portal account. Open the main menu (top left) and go to the \u201cConfig\u201d page. Using the dropdown at the top of the screen, select the building and floor (sub locations) where the sensor is installed.</p> <p></p>"},{"location":"sensors/03_subsensor_install/#2-find-the-sensor","title":"2 - Find the sensor","text":"<p>To find the new sensor, click on the \u201c+\u201d in the \u201cConfigured Sensors\u201d section. A list of all IoT sensors near any BASE sensor on that floor (and not already configured) will appear. To find a specific sensor you can press the Search icon and either:</p> <ul> <li>press the square Frame icon to the left of the search bar and scan the sensor\u2019s QR code with your camera; or</li> <li>manually type in the sensor\u2019s id (last 4 digits is usually enough). If you are unsure about the id of the sensor, or can't find the id on the sensor, you can use the LightFi Air app to scan for the nearest sensors, the id shown in the app is the last 4 digits of the sensor id.</li> </ul>"},{"location":"sensors/03_subsensor_install/#3-add-details","title":"3 - Add details","text":"<p>Once you've found the sensor you want to configure, press the square \u201c+\u201d to its right. Please give it a name representing the room or area (so it is easy to find later). Scroll down and give the sensor position on the floor plan (by pressing on the floor plan in the room or area where the sensor is located). If the floor plan is not initially on screen, click on the \u201cGo to location\u201d icon in the top left corner of the map.</p> <p> </p>"},{"location":"sensors/03_subsensor_install/#4-complete","title":"4 - Complete","text":"<p>To complete the setup, press \u201cAdd New Sensor\u201d. The sensor is now configured on the LightFi Portal, and data is being collected.</p> <p>If you need to configure BACnet details for the sensor this can be done from the sensor configuration page, please see BACnet documentation </p>"},{"location":"sensors/BACnet/","title":"BACnet","text":"<p>LightFi sensors can be used to monitor multiple types of physical spaces (such as offices, airports, universities, ...).</p> <p>These sensors are able to measure different types of data and report this data directly to the building management system (BMS):</p> <ul> <li>Base - Broad Level Occupancy Sensor.</li> <li>Hoth - Temperature and Humidity;</li> <li>Sahara - CO\u2082 and Particulate Matter;</li> <li>Alpine - CO\u2082, Temperature and Relative Humidity;</li> <li>X1 - Presence;</li> </ul> <p>The Base sensor includes wireless technology capabilities that allow it to act as a gateway for receiving data from the other sensors and send it to the LightFi cloud platform for data visualisation. The Base sensor also acts as a gateway for the BACnet/IP implementation, enabling the Base to create BACnet representations of the actual wireless sensors.</p> <p>The sensor data from all sensors can then be used by the BMS to monitor and directly control the building, for example using occupancy to alter the ventilation dynamically according to the building usage, keeping the air quality high and the energy use low.</p> <p> </p> Example BACnet implementation of LightFi sensors on a BMS network"},{"location":"sensors/BACnet/#lightfi-bacnet-sensors","title":"LightFi BACnet Sensors","text":""},{"location":"sensors/BACnet/#lightfi-base","title":"LightFi Base","text":"<p>The LightFi \"Base\" sensor is a long-range, broad level occupancy sensor, which determines the percentage occupancy levels by measuring the number active devices on a floor area, with coverage of 250 - 500+ m\u00b2.</p> Object Type Object ID Object Name Present Value Device (1) LightFi_LF-AABBCCDDEEFF N/A Analog Input AI1 WiFi Occupancy Raw (number) Current value / Default = 0 Analog Input AI2 WiFi Occupancy Percentage (AI 1) / (AV 1) * 100 Analog Value AV1 WiFi Occupancy Maxium Setpoint Default = 100 <p>Notes:</p> <ol> <li> <p>Object ID can be configured via LightFi Portal;</p> </li> <li> <p>The Object Name field will depend on the device\u2019s MAC Address. This value should start with \"LightFi_LF-\".</p> </li> <li> <p>The PICS document for this sensor can be found here: LightFi Base</p> </li> </ol>"},{"location":"sensors/BACnet/#lightfi-sahara","title":"LightFi Sahara","text":"<p>The Sahara sensor measures: Carbon Dioxide (CO\u2082) levels with a dual-channel NDIR sensor and Particulate Matter (PM2.5).</p> Object Type Object ID Object Name Present Value Device (1) LightFi_LF5-AABBCCDDEEFF (2) N/A Analog Input AI1 Carbon Dioxide level (ppm) Current Reading / -999 if not initialised Analog Input AI2 Particulate Matter PM2.5 Current Reading / -999 if not initialised Analog Input AI3 RSSI Current Reading / -999 if not initialised <p>Possible valid values for Present Value :</p> Object ID Object Name Minimum Maximum AI1 Carbon Dioxide level (ppm) 400 5000 AI2 Particulate Matter PM2.5 0 500 AI3 RSSI -999 -1 <p>Notes:</p> <ol> <li> <p>Object ID can be configured via LightFi Portal;</p> </li> <li> <p>The Object Name field will depend on the device\u2019s MAC Address. This value should start with \"LightFi_LF5-\".</p> </li> <li> <p>The PICS document for this sensor can be found here: LightFi Sahara</p> </li> </ol>"},{"location":"sensors/BACnet/#lightfi-alpine","title":"LightFi Alpine","text":"<p>The Alpine sensor measures: Carbon Dioxide (CO\u2082) levels with a dual-channel NDIR sensor, Temperature and Relative Humidity.</p> Object Type Object ID Object Name Present Value Device (1) LightFi_AQ2-AABBCCDDEEFF (2) N/A Analog Input AI1 Carbon Dioxide level (ppm) Current Reading / -999 if not initialised Analog Input AI2 Temperature value (Celsius) Current Reading / -999 if not initialised Analog Input AI3 Relative Humidity value (Percentage) Current Reading / -999 if not initialised Analog Input AI4 Battery Level Value (Percentage) Current Reading / -999 if not initialised Analog Input AI5 RSSI Current Reading / -999 if not initialised <p>Possible valid values for Present Value :</p> Object ID Object Name Minimum Maximum AI1 Carbon Dioxide level (ppm) 0 5000 AI2 Temperature value (Celsius) 0 65 AI3 Relative Humidity value (Percentage) 10 90 AI4 Battery Level Value (Percentage) 0 100 AI5 RSSI -100 -1 <p>Notes:</p> <ol> <li> <p>Object ID can be configured via LightFi Portal;</p> </li> <li> <p>The Object Name field will depend on the device\u2019s MAC Address. This value should start with \"LightFi_AQ2-\".</p> </li> <li> <p>The PICS document for this sensor can be found here: LightFi Alpine.</p> </li> </ol>"},{"location":"sensors/BACnet/#lightfi-hoth","title":"LightFi Hoth","text":"<p>The Hoth sensor measures temperature, relative humidity and its own battery level.</p> Object Type Object ID Object Name Present Value Device (1) LightFi_MS1-AABBCCDDEEFF (2) N/A Analog Input AI1 Temperature value (Celsius) Current Reading / -999 if not initialised Analog Input AI2 Relative Humidity value (Percentage) Current Reading / -999 if not initialised Analog Input AI3 RSSI Current Reading / -999 if not initialised Analog Input AI4 Battery Level Value (Percentage) Current Reading / -999 if not initialised <p>Possible valid values for Present Value :</p> Object ID Object Name Minimum Maximum AI1 Temperature value (Celsius) -40 70 AI2 Relative Humidity value (Percentage) 0 100 AI3 RSSI -100 -1 AI4 Battery Level Value (Percentage) 0 100 <p>Notes:</p> <ol> <li> <p>Object ID can be configured via LightFi Portal;</p> </li> <li> <p>The Object Name field will depend on the device\u2019s MAC Address. This value should start with \"LightFi_MS1-\".</p> </li> <li> <p>The PICS document for this sensor can be found here: LightFi Hoth</p> </li> </ol>"},{"location":"sensors/BACnet/#lightfi-x1","title":"LightFi X1","text":"<p>The X1 is a battery powered Passive Infrared (PIR) motion sensor, designed to detect binary desk or room occupancy.</p> Object Type Object ID Object Name Present Value Device (1) LightFi_AMP-AABBCCDDEEFF (2) N/A Analog Input AI1 Motion Sensor (Presence) Current Reading / -999 if not initialised Analog Input AI3 RSSI Current Reading / -999 if not initialised Analog Input AI4 Battery Level Value (Percentage) Current Reading / -999 if not initialised <p>Possible valid values for Present Value :</p> Object ID Object Name Minimum Maximum AI1 Motion Sensor (Presence) 0 1 AI2 RSSI -100 -1 AI4 Battery Level Value (Percentage) 0 100 <p>Notes:</p> <ol> <li> <p>Object ID can be configured via LightFi Portal;</p> </li> <li> <p>The Object Name field will depend on the device\u2019s MAC Address. This value should start with \"LightFi_AMP-\". </p> </li> <li> <p>The PICS document for this sensor can be found here: LightFi X1</p> </li> <li> <p>The Motion Sensor Present Value will change on PIR sensor trigger - value will be set to <code>1</code> - and it will change back to <code>0</code> if no motion is detected after 5 to 15 seconds.</p> </li> </ol>"},{"location":"sensors/BACnet/#enabling-sensors-in-bacnet-network","title":"Enabling Sensors in BACnet Network","text":""},{"location":"sensors/BACnet/#base-sensor","title":"Base Sensor","text":"<p>Activation of the Base Sensor can be made through the LightFi Portal by accessing \"BACnet Config\" in the desired base sensor configuration page and pressing the \"Enable\" button.</p> <p>When activating the Base Sensor in our platform, the following fields are able to be configured:</p> <ul> <li>Building Network Number - The network number of the existing building BACnet/IP network the sensor will be connected to e.g. 2000 (For BACnet/IP this number may not affect your implementation, if you do not know the number it may be possible to use a default like 2000);</li> <li>VLAN Network Number - This is the BACnet network number of the BACnet network internal to the router within the BASE sensor, this should not clash with any other existing BACnet network numbers. A good number to use for this is something related to the BACnet ID of the BASE sensor (you can even use the same number), so that it is easy to identify which networks relate to which BASE.</li> <li>BACnet ID of the device - A unique ID for the sensor according to your BACnet/IP configuration.</li> </ul> <p>After entering these fields, the device will take around 2 minutes to apply the changes and create the BACnet gateway.</p>"},{"location":"sensors/BACnet/#example-of-base-sensor-bacnet-configuration","title":"Example of Base Sensor BACnet configuration","text":"<ol> <li>Using the LightFi Portal dashboard, select a sensor and go to the sensor configuration page. You can do this either by using the config page to navigate to the location for the sensor and selecting it or by selecting \"Sensor Info\" from the sensor menu on the dashboard data list (as below): </li> <li>On the Sensor Configuration page, click on \"BACnet Config\" section and then press \"Enable\": </li> <li>Press on the \"Enable\" button, fill the fields and then press \"Submit\": </li> <li>When you press submit, a small blue circle will indicate the sensor is BACnet enabled (<code>1.</code>) and a Success/confirmation message (<code>2.</code>) will appear. </li> </ol>"},{"location":"sensors/BACnet/#wireless-sensors","title":"Wireless Sensors","text":"<p>All the other available wireless sensors can be activated in the same way, by accessing  \"BACnet Config\" in the desired wireless sensor configuration page and pressing the \"Enable\" button.</p> <p>This will make a text field appear for entering its BACnet ID. Note that if a BACnet ID is not entered, our system will pick one and present it in the configuration page.</p> <p>Unlike the Base sensor, these changes will apply immediately and the sensors should be available on the BACnet/IP Network within a few seconds.</p>"},{"location":"sensors/BACnet/#example-of-wireless-sensors-bacnet-configuration","title":"Example of Wireless Sensors BACnet configuration","text":"<p>A wireless sensor can only be BACnet enabled if it was previously registered on the portal (See here).</p> <ol> <li>Using the LightFi Portal dashboard, select a sensor and go to the sensor configuration page. You can do this either by using the config page to navigate to the location for the sensor and selecting it or by selecting \"Sensor Info\" from the sensor menu on the dashboard data list (as below): </li> <li>On the Sensor Configuration page, click on \"BACnet Config\" section and then press \"Enable\": </li> <li>Fill the fields and then press \"Submit\": </li> <li>When you press submit, a small blue circle will indicate the sensor is BACnet enabled (<code>1.</code>) and a Success/confirmation message (<code>2.</code>) will appear. </li> </ol>"},{"location":"sensors/BACnet/#view-all-bacnet-sensors-in-a-location","title":"View all BACnet Sensors in a Location","text":"<p>BACnet network details for all LightFi sensors in a particular location can be viewed on the Location Configuration Page.</p> <p>After selecting the desired Location (\"Sub Location\" section), press the \"Show BACnet Enabled Sensors\" button on the \"Configured Sensors\" section (see image).</p> <p>For detailed BACnet information on a specific device, hover the mouse on the desired BACnet ID item and a tooltip will appear.</p> <p></p>"}]}